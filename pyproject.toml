[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "clean-py"
version = "0.1.0"
description = "Clean Architecture Python demonstration project"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.28.0",
    "pydantic>=2.0.0",
    "streamlit>=1.28.0",
    "python-dateutil>=2.8.2",
    "requests>=2.31.0",
    "boto3>=1.28.0",
    "watchtower>=3.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "ruff>=0.1.6",
    "pylint>=3.0.0",
    "pyright>=1.1.350",
    "pre-commit>=3.5.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "ipython>=8.12.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.0",
]

[tool.ruff]
target-version = "py311"
line-length = 120
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # Pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "ANN",  # flake8-annotations (enforce type hints)
    "N",    # pep8-naming
    "S",    # flake8-bandit (security)
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "ARG002", # Unused method argument
    "S101",   # Use of assert detected (allow in tests)
    "ANN001", # Missing type annotation for function argument (overly strict)
    "ANN002", # Missing type annotation for *args (overly strict)
    "ANN003", # Missing type annotation for **kwargs (overly strict)
    "ANN202", # Missing return type annotation for private function (overly strict)
    "ANN401", # Dynamically typed expressions (Any) are disallowed (needed for AWS Lambda context)
    "S110",   # try-except-pass (acceptable for non-critical operations)
    "S311",   # Standard pseudo-random generators (acceptable for sampling)
]

fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["ARG001", "ARG002", "S101", "ANN"]
"src/streamlit_app.py" = ["S603", "S607"]  # Allow subprocess calls in demo
"src/infrastructure/logging/decorators.py" = ["ANN001", "ANN002", "ANN003"]  # Complex decorator typing

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["src"]
force-single-line = false
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pylint.main]
py-version = "3.11"
source-roots = ["src"]

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    # Documentation (optional for demo)
    "C0103",  # Invalid name (handled by naming conventions)
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    
    # DDD/Clean Architecture patterns
    "R0902",  # Too many instance attributes (DDD entities have rich models)
    "R0913",  # Too many arguments (factory methods need parameters)
    "R0917",  # Too many positional arguments (domain constructors)
    "W0212",  # Protected access (_domain_events is intentional pattern)
    "W0201",  # Attribute defined outside __init__ (domain events pattern)
    
    # Abstract method patterns
    "W0107",  # Unnecessary pass (abstract method implementations)
    "W2301",  # Unnecessary ellipsis (abstract method placeholders)
    
    # Repository/Infrastructure patterns
    "C0415",  # Import outside toplevel (conditional imports in mappers)
    "E1102",  # Not callable (SQLAlchemy func.now dynamic attributes)
    "E1123",  # Unexpected keyword argument (dataclass constructors)
    
    # Import issues (handled by PYTHONPATH)
    "E0401",  # Import error
    "E0611",  # No name in module
    
    # Streamlit global scope patterns
    "W0621",  # Redefining name from outer scope (streamlit functions)
    
    # Non-code quality issues
    "W0511",  # TODO comments (managed separately in project tracking)
    "W0613",  # Unused argument (handled by ruff)
    "R0903",  # Too few public methods (value objects, interfaces)
    
    # Logging patterns
    "W1203",  # Use lazy % formatting in logging (f-strings are more readable)
    "W0718",  # Catching too general exception (acceptable in error handlers)
    "R0911",  # Too many return statements (acceptable in factory functions)
]

[tool.pylint.design]
max-args = 8
max-locals = 20
max-returns = 6
max-branches = 15
max-statements = 50

[tool.pylint.format]
max-line-length = 120

[tool.pylint.similarities]
min-similarity-lines = 10

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
asyncio_mode = "auto"
pythonpath = ["src"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

[tool.pyright]
include = ["src", "tests"]
reportMissingParameterType = "warning"  # Too strict for decorators and test mocks
reportUnusedFunction = "warning"  # Test fixtures may appear unused
reportPrivateUsage = "warning"  # Tests need to access private functions
reportUntypedFunctionDecorator = "warning"  # Complex decorators are hard to type

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
tests = ["B201", "B301"]
skips = ["B101"]  # Skip assert_used in tests